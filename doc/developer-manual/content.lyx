#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CEGUI Unified Editor Developer Manual
\end_layout

\begin_layout Author
Martin Preisler
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Part
Prerequisites
\end_layout

\begin_layout Section
Knowledge requirements
\end_layout

\begin_layout Standard
Because of size constrains, I won't go into the following areas:
\end_layout

\begin_layout Itemize
Python
\end_layout

\begin_layout Itemize
PySide and Qt
\end_layout

\begin_layout Itemize
CEGUI API
\end_layout

\begin_layout Section
Getting the source code
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ hg clone http://crayzedsgui.hg.sourceforge.net:8000/hgroot/crayzedsgui/CEED
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Branches and Tags
\end_layout

\begin_layout Itemize
default - unstable forward development, likely to be based on unstable CEGUI
\end_layout

\begin_layout Itemize
snapshotX - development snapshots, based on unstable CEGUI, should be considered
 tech previews
\end_layout

\begin_layout Section
Starting without installation
\end_layout

\begin_layout Standard
It's extremely valuable to start the editor without installing it.
 You can do so by using the 
\emph on
runwrapper.sh
\emph default
 script contained in the repository (it is not shipped in release tarballs!).
 This script will spawn a new bash shell that will contain environment variables
 set so that CEED finds its own modules as well as PyCEGUI.
 By default it assumes the following directory structure:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$prefix/CEED/bin/runwrapper.sh
\end_layout

\begin_layout Plain Layout

$prefix/cegui_mk2/build/lib/PyCEGUI.so
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If your directory structure looks differently you need to alter the script.
\end_layout

\begin_layout Part
Architecture and design decisions
\end_layout

\begin_layout Section
Core API
\end_layout

\begin_layout Standard
The whole code is divided into folders where the root folder provides basic
 reusable functionality (project management, undo view, tab management,
 â€¦) and the editors themselves are providing editing facilities for various
 file types.
\end_layout

\begin_layout Subsection
TabbedEditor
\end_layout

\begin_layout Standard
A base class for editors hosted in a tab.
 There are 3 phases that need to happen before a tabbed editor shows up
 to the user:
\end_layout

\begin_layout Enumerate
Construction of the class
\end_layout

\begin_layout Enumerate
Initialisation 
\end_layout

\begin_deeper
\begin_layout Enumerate
all the supporting widgets get created
\end_layout

\begin_layout Enumerate
the file is loaded and processed
\end_layout

\end_deeper
\begin_layout Enumerate
Activation 
\end_layout

\begin_deeper
\begin_layout Enumerate
this puts the tabbed editor 'on stage'
\end_layout

\end_deeper
\begin_layout Standard
The destruction works in the exact opposite order.
\end_layout

\begin_layout Standard
To avoid repeating code (DRY principle), there are 2 very important classes
 that add functionality to TabbedEditor that you want to inherit if applicable
 to avoid reinventing.
\end_layout

\begin_layout Subsubsection
UndoStackTabbedEditor
\end_layout

\begin_layout Standard
You are using the Qt's UndoStack.
 This connects all the necessary calls.
\end_layout

\begin_layout Subsubsection
MultiModeTabbedEditor
\end_layout

\begin_layout Standard
Useful when you want multiple editing modes.
 As an example, let us take the layout editor.
 It has 3 modes - visual, code and live preview.
 You can freely switch between them and they each offer a different look
 at the same data.
 At any point in time you are viewing/editing in one mode only.
 Please note that you must be using UndoStack in this situation as switching
 modes is an undo action!
\end_layout

\begin_layout Subsection
Property editing
\end_layout

\begin_layout Standard
A lot of CEGUI classes provide basic introspection via property strings.
 CEED has a set of classes to reuse when you want to edit properties of
 widgets or any other classes that inherit from PropertySet.
\end_layout

\begin_layout Section
Embedded CEGUI
\end_layout

\begin_layout Standard
To make sure everything is rendered exactly as it will appear in CEGUI it
 is used in the editor.
 This also ensures that whatever custom assets you have, they will be usable
 in the editor exactly as they are in CEGUI itself.
\end_layout

\begin_layout Standard
As CEGUI is a C++ library, making it accessible from Python is not trivial.
 I have written python bindings for CEGUI called PyCEGUI using py++ boost::pytho
n for this purpose.
 It is important to realise though that even though I tried to make it pythonic
 and reasonably safe, mistreating PyCEGUI can still cause segfaults any
 other phenomena usually prevented by using a scripting language.
\end_layout

\begin_layout Section
Compatibility layers
\end_layout

\begin_layout Standard
Compatibility is only dealt with on data level.
 The editor itself only supports one version of each format and layers allow
 to convert this raw data to other formats.
 Here is an example of how to do that:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# we want to migrate and imageset from data format "foo" to "bar"
\end_layout

\begin_layout Plain Layout

# data is a string containing imageset in "foo" format
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from ceed.compatibility import imageset as compat
\end_layout

\begin_layout Plain Layout

convertedData = compat.manager.transform("foo", "bar", data)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are also facilities to guess types of arbitrary data.
 See API reference of CompatibilityManager for more info.
\end_layout

\begin_layout Section
Model View (Controller)
\end_layout

\begin_layout Standard
As most editing applications we have the MVC paradigm.
 When I say something is the 
\emph on
model
\emph default
 I mean that it encapsulates the data we are editing.
 The 
\emph on
view
\emph default
 on the other hand encapsulates the facility to view the data we are editing
 in their current state.
 The 
\emph on
controller
\emph default
 allows the user to interact with the data.
 Most of the time 
\emph on
view
\emph default
 meshes with 
\emph on
controller
\emph default
 as it does in the Qt world.
\end_layout

\begin_layout Section
Imageset editing
\end_layout

\begin_layout Standard
Lives in the 
\emph on
ceed.editors.imageset
\emph default
 package.
 We use classes of 
\emph on
ceed.editors.imageset.elements
\emph default
 to model the data instead of using CEGUI for this one.
 It's a multimode editor with visual and code modes.
\end_layout

\begin_layout Section
Layout editing
\end_layout

\begin_layout Standard
Located in the 
\emph on
ceed.editors.layout
\emph default
 package.
 CEGUI Window is used to model the entire layout hierarchy.
 We use WidgetManipulator class to add serialisation (for undo/redo), resizing
 handles and more to windows.
 It's a multimode editor with visual, code and live preview modes.
 The live preview mode does no editing, instead it just views the current
 layout and allows user to interact with it to test it.
\end_layout

\begin_layout Section
Animation editing
\end_layout

\begin_layout Standard
Located in 
\emph on
ceed.editors.animation_list
\emph default
 package.
 We use wrappers to deal with the fact that CEGUI has no model for a list
 of animations.
\end_layout

\begin_layout Standard
KeyFrames had to have indices added because comparing floats for equality
 is unrealiable.
 So in the end we sort all keyframes by position and figure out their indices
 from that.
 To avoid placing 2 keyframes at the exact same position we add a small
 epsilon until we have no clashes whenever we encounter this possibility.
\end_layout

\begin_layout Part
Contributing
\end_layout

\begin_layout Section
Coding style
\end_layout

\begin_layout Standard
CEED doesn't follow PEP8 python style recommendation when it comes to method
 and variable naming.
 The reason I chose to use camelCase for methods and variables is that PySide
 and CEGUI both use that and CEED calls a lot of methods form these 2 APIs.
 The code looked much better with camelCase naming.
 Whether that was or was not a good call is debatable but that's the way
 it is.
\end_layout

\begin_layout Itemize
use 4 spaces for indentation
\end_layout

\begin_layout Itemize
use CamelCase for class naming
\end_layout

\begin_layout Itemize
don't use wildcard imports! (no from abc import * can appear anywhere in
 the code)
\end_layout

\begin_layout Itemize
use camelCase for method and variable naming
\end_layout

\begin_layout Itemize
document methods and classes with the triple quote docstyle syntax
\end_layout

\begin_layout Itemize
comment other things with # prefix only
\end_layout

\begin_layout Section
DVCS - forking
\end_layout

\begin_layout Standard
Create a fork of 
\emph on
http://crayzedsgui.hg.sourceforge.net:8000/hgroot/crayzedsgui/CEED
\emph default
 on bitbucket.org or elsewhere.
 Start each feature or substantial fix in a separate branch, this makes
 it easy to review and possibly reject some paths without rejecting everything.
 When you are finished with your branch make sure you merge all upstream
 changes if any.
 Having to deal with merge conflicts makes the reviewers cranky.
 After all of this is done, simply contact upstream developer to merge your
 changes into the main repository.
 You can usually reach someone through IRC (freenode/#cegui), mantis bug
 tracker or email (
\emph on
team@cegui.org.uk
\emph default
).
\end_layout

\begin_layout Section
Old fashioned way - patches
\end_layout

\begin_layout Standard
You can alternatively just send unified diffs by email if you so desire
 (
\emph on
team@cegui.org.uk
\emph default
).
\end_layout

\end_body
\end_document
