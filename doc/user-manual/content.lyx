#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman ae
\font_sans default
\font_typewriter default
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CEGUI Unified Editor user manual
\end_layout

\begin_layout Author
Martin Preisler
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Part
Prerequisites
\end_layout

\begin_layout Section
Hardware and software requirements
\end_layout

\begin_layout Standard
Operating system:
\end_layout

\begin_layout Itemize
GNU/Linux system with X11
\end_layout

\begin_layout Itemize
Windows XP and newer
\end_layout

\begin_layout Itemize
MacOS X
\end_layout

\begin_layout Itemize
BSD system with X11 (not officially supported)
\end_layout

\begin_layout Standard
Hardware:
\end_layout

\begin_layout Itemize
at least Intel Pentium 4 or AMD Athlon XP (just a baseline, it may work
 on older hardware)
\end_layout

\begin_layout Itemize
512 MB RAM
\end_layout

\begin_layout Itemize
Graphics card capable of running CEGUI (accelerated OpenGL with FBO support),
 NVIDIA GeForce 4 or ATI/AMD equivalent
\end_layout

\begin_layout Standard
Dependencies:
\end_layout

\begin_layout Itemize
Python 2.7
\end_layout

\begin_layout Itemize
Qt 4.7 or 4.8
\end_layout

\begin_layout Itemize
PySide â€“ python bindings for Qt
\end_layout

\begin_layout Itemize
CEGUI 1.0 (CEED supports CEGUI 0.7 as well but uses 1.0 internally)
\end_layout

\begin_layout Itemize
PyCEGUI 1.0
\end_layout

\begin_layout Section
Knowledge prerequisites
\end_layout

\begin_layout Standard
To use the Unified Editor, you have to have some basic knowledge of how
 GUI systems work in general.
 It would be best if you were familiar with how CEGUI works but Qt or GTK
 knowledge can be transferred without problems.
\end_layout

\begin_layout Standard
To edit assets in 
\emph on
code mode
\emph default
 you should understand the format in question, the editor makes no effort
 to make code editing easier with highlighting or any code references (it's
 a planned feature though).
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Standard
The application is currently distributed as a source tarball that works
 on all supported platforms (if you install dependencies) or a ZIP archive
 with standalone executable for Win32 (needs no dependencies).
\end_layout

\begin_layout Subsection
Source tarball
\end_layout

\begin_layout Standard
First, make sure you have all dependencies.
 Refer to guides of the dependencies on how to install them.
\end_layout

\begin_layout Standard
Download the tarball, extract it.
 You should end up with a folder called 
\emph on
CEED-${version}
\emph default
.
 Go into this folder in CLI (terminal emulator on UNIXes, cmd.exe on Windows)
 and call 
\emph on
python setup.py install
\emph default
 as administrator.
 This should trigger the installation.
 After the installation finishes, run 
\emph on
ceed-gui
\emph default
 to start the application.
\end_layout

\begin_layout Subsection
Standalone executable (Win32)
\end_layout

\begin_layout Standard
You do not have to install anything in this case (all dependencies are bundled),
 just unzipping the archive and running 
\emph on
ceed-gui.exe
\emph default
 will make the application start.
 If this is not the case, please report it as a bug.
\end_layout

\begin_layout Subsection
.app bundle (MacOSX)
\end_layout

\begin_layout Standard
CEED behaves like a proper MacOSX native application.
 Double clicking will start the GUI, dragging it to 
\emph on
Applications
\emph default
 will install it.
\end_layout

\begin_layout Part
Working with the application
\end_layout

\begin_layout Section
The basics
\end_layout

\begin_layout Subsection
Main interface
\end_layout

\begin_layout Standard
This interface hosts all the tabbed editors and provides some functionality
 that is shared by all the editors.
 It consist of an interface surrounding the application.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename basics/main_interface.png
	width 80page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
overview of the interface
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Multi tab editing
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0col%
width "50col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename basics/multi_tab_reordering.png
	width 40page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "40page%"
height "1pt"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename basics/multi_tab_context_menu.png
	width 40page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
tabs offer reordering and a context menu
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The centre of the application consists of tabs, each tab represents one
 opened file.
 CEED will strive not to have 2 tabs for one file opened, if you try to
 open one file twice it will just activate the existing tab for the file.
 Any of the tabs can be closed on user's request, if there are unsaved changes
 the user will be asked what to do about them.
 Reordering tabs is also possible using mouse drag-moving.
 The interface including dock widgets, toolbars, etc...
 may change when switching tabs.
 Switching tabs does not count as an undo action, it is instead just a context
 change action.
\end_layout

\begin_layout Subsection
Multi mode editing
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0col%
width "50col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename basics/multi_mode.png
	width 40page%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
switch modes by clicking the bottom mode tabs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For some file types (mostly .imageset and .layout), it makes sense to edit
 in both visual mode (WYSIWYG more or less) as well as XML (editing plain
 text XML code).
 Undo and redo is transparent between mode switching as mode switching counts
 as an undo action.
 You can switch modes by clicking on the bottom tab pane.
 All files are by default opened in Visual mode and XML is regarded as a
 clutch mechanism, a tool to make tedious mass changes or work around problems
 with Visual mode.
\end_layout

\begin_layout Standard
Code editing is currently very simplistic and does not even have syntax
 highlighting! Please also note undo/redo is very wasteful when it comes
 to code editing and long editing sessions may end up with a lot of RAM
 being allocated.
\end_layout

\begin_layout Subsection
Project manager
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0in
width "50col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename basics/project_manager.png
	width 40page%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
project manager dock widget
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Allows user to manage a project (project is a set of related files), browse
 through files, open any file for editing, add new or existing files to
 the project and remove files from the project.
 Most of the project managing takes place in the 'Project Manager' dock
 widget.
 The dock widgets lists all files currently in the project and allows user
 to edit/view them by double clicking them.
 Right clicking brings up a context menu with the ability to add files to
 the project or remove currently selected files from the project.
 The main reason for project management is to have CEGUI resource path settings
 shared for all the files in the project.
 The project files are designed to be committed to a repository and used
 on different computers for as robust and trouble-free workflow as possible,
 so all paths are relative to the project file (even though you may see
 absolute paths in the editor itself, they get converted to relative paths
 in the end).
\end_layout

\begin_layout Subsection
File manager
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
You are advised to use project manager if at all possible, it will improve
 workflow, especially in bigger teams.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In addition to the project manager, CEED allows you to browse the filesystem
 and simply open files for quick editing.
 Please note that this will only work for some file types (it can not work
 for schemes and layouts because CEGUI paths are not set if project is not
 loaded).
 This is again contained in a dock widget that hosts the functionality.
 It has a very simplistic interface, displaying current path, allowing the
 user to go one level up the hierarchy and simply listing files and folder
 in the current path.
\end_layout

\begin_layout Standard
Double clicking a file opens it for editing.
\end_layout

\begin_layout Standard
Furthermore, this dock widget will watch for changes on the filesystem and
 refresh accordingly.
\end_layout

\begin_layout Subsection
Resizable rectangle
\begin_inset CommandInset label
LatexCommand label
name "sub:Resizable-rectangle"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename basics/resizable_rect_right_edge.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename basics/resizable_rect_top_right_corner.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
resizable handles appear when you hover over edges/corners
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A construct used reused in many places in CEED.
 Represents a rectangular object that can be resized and/or resized.
 It offers features that would otherwise have to be reimplemented in many
 places.
 The main inspiration was GIMP's selection rectangle (TODO: citation).
 Can be moved by dragging any area that doesn't highlight a resize handle.
 There are 8 areas that resize the rectangle if you drag them (these are
 called resize handles) - 4 edges and 4 corners, they get highlighted when
 you hover over them.
\end_layout

\begin_layout Subsection
Undo and Redo functionality
\end_layout

\begin_layout Standard
Since most tabbed editors allow undo and redo, the main interface allows
 you to perform these actions via shared means in the top toolbar.
 Undo & Redo are per-file, so whenever you switch tabs, the undo stack gets
 changed to a completely different stack (all stacks are independent).
 If you for example do changes to file A, then switch to file B, do some
 changes and keep pressing Undo, only changes to file B gets undone, you
 have to switch to A again and undo there.
 Selections are not undoable as they do not count as undo actions.
 There is one very important aspect that breaks the 
\begin_inset Quotes eld
\end_inset

context switching is not an undo action
\begin_inset Quotes erd
\end_inset

 rule: Switching editing mode is an undoable action though as the changes
 of XML code do not make sense in visual code (even though just switching
 to XML mode does not change the file at all).
\end_layout

\begin_layout Standard
Undo and Redo can be very powerful and allows free experimentation without
 fear of losing data.
 Apart from possible bugs in the applications, all things that affect data
 are undo actions and are undoable.
 Use that fact to your advantage!
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
Even with undo/redo, you are advised to use version control or other mechanisms.
 Undo redo actions are lost when you close the application!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Creating a project
\end_layout

\begin_layout Standard
You will need to create a project for any serious editing with CEED.
 There are some quick hints about how to do this in the quickstart guide
 but we will dig into more details here.
\end_layout

\begin_layout Standard
The first step is to choose File -> New -> Project.
 The dialog in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:creating-a-project"

\end_inset

 will appear.
 The most important choice you have to make is where to store the project
 file.
 It is recommended to store it in a directory made exclusively for the project
 to make it relocatable.
 You can optionally instruct CEED to auto create resource directories similar
 to the CEGUI sample datafiles directory structure.
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement r
overhang 0in
width "50col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename project_creation/first_step.png
	width 40page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
first step of creating a project
\begin_inset CommandInset label
LatexCommand label
name "fig:creating-a-project"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Project settings will pop up after the project file is created.
 You can always return to project settings to change settings later.
 It is recommended to get the basics down when creating the project as that
 will prevent many headaches (CEED uses the project to choose versions of
 new files for example!).
 Most of the options are documented in the interface as can be seen on the
 following screenshots.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
CEED project will always be saved in some folder, all paths are saved relative
 to this folder.
 This allows you to move the project directory around and share it with
 your co-developers.
 First thing you need to choose is the base directory.
 This will by default be the same as the folder your project file is in.
 You can however set it to the base of your CEGUI resources and the rest
 of CEGUI resource paths will be relative to it.
 This allows to switch paths around quickly.
 If you are unsure, just leave it as it is.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The next thing you need to choose is the target CEGUI version.
 CEED supports CEGUI 1.0 and 0.7.
 This has very drastic consequences, especially on any resource files you
 create from scratch, so make sure you set it correctly.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Following is the section with paths to CEGUI resource directories, if you
 use CEGUI's directory structure (the one used in samples), you can simply
 fill or browse for the first editbox and press apply.
 Otherwise you will have to fill the resource paths manually.
 Even though the paths are shown as absolute, they are stored 
\emph on
relative
\emph default
 to the project's base directory, which again is stored relative to parent
 directory of the .project file.
 This is what makes the whole project directory relocatable.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename project_creation/settings_top.png
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename project_creation/settings_resource_paths.png
	width 60page%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
project settings
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
CEGUI sample directory structure
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
Project/gui_datafiles/{layouts,schemes,imagesets,...}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Very popular, especially among CEGUI beginners.
 Only filenames are used to locate/reference CEGUI resources.
\end_layout

\begin_layout Itemize
project file path: 
\emph on
Project/Project.project
\end_layout

\begin_layout Itemize
base directory: 
\emph on
./gui_datafiles
\end_layout

\begin_layout Itemize
resource directories: 
\emph on
./{layouts,schemes,imagesets,...}
\end_layout

\begin_layout Subsection
Worldforge/Ember directory structure
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
Project/gui_datafiles/{layouts,schemes,imagesets,...}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also popular, used very often in proprietary games as well.
 All paths used to locate/reference CEGUI resources are relative to ./ in
 this case.
\end_layout

\begin_layout Itemize
project file path: 
\emph on
Project/Project.project
\end_layout

\begin_layout Itemize
base directory: 
\emph on
./
\end_layout

\begin_layout Itemize
resource directories (all of them): 
\emph on
./
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Imageset editing
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
An imageset is practically a texture atlas, a technique used to put many
 smaller images on one texture to drastically speed up rendering (texture
 switching is still a very expensive operation, even on modern hardware).
 Each imageset has a name, underlying texture file path, autoscaled settings,
 native resolution and a set of images.
 
\begin_inset Quotes eld
\end_inset

Image
\begin_inset Quotes erd
\end_inset

 means a rectangle selection of the underlying texture.
 Each of these images has a position (x, y), width, height and an offset
 (x, y).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Opening existing imagesets for editing does not require you to have a project
 opened - the underlying image is sought after in the same directory the
 .imageset file resides in.
 If a project file is opened, the appropriate resource directory is used
 to search for the files instead.
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
Upon opening the imageset, a dock widget containing basic imageset properties,
 which are all editable, and a list of images shows up.
 The centre part of the editor shows the underlying texture and rectangles
 describing geometry of the images.
 Image rectangles can be selected (including multiple selection).
 Selection works in both the image list and the editor's centre part (rubber
 band selection).
 Both selections are synchronised.
 Names of the images will be shown as labels when the images are selected.
 This can be disabled in settings, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Settings"

\end_inset

 for more details.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename imageset_editing/overview.png
	width 80page%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
rubber band selecting in the imageset editor
\begin_inset CommandInset label
LatexCommand label
name "fig:rubber-band-selecting"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Imageset properties
\end_layout

\begin_layout Standard
As can be seen in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:rubber-band-selecting"

\end_inset

, imageset itself has several properties that affect all images defined
 in it.
\end_layout

\begin_layout Standard
The name of the imageset means different things depending on which version
 of CEGUI you are targeting.
 It is simply a prefix of each of the defined images' names in CEGUI 1.0
 with 
\begin_inset Quotes eld
\end_inset

ImagesetName/ImageName
\begin_inset Quotes erd
\end_inset

 being the full name of a single image, in 0.7 images are strictly tied to
 imagesets and are referenced using 
\begin_inset Quotes eld
\end_inset

set: ImagesetName image: ImageName
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Underlying texture is the texture that will be used to draw all the images
 defined inside the imageset.
\end_layout

\begin_layout Standard
The auto scaled settings affects how the imageset image sizes will be affected
 on various resolutions.
 In a nutshell, with disabled auto scaling the images will always have exactly
 the size they are defined with, with any other auto scaled settings, the
 size will be affected by the resolution CEGUI is started in (see CEGUI
 documentation for explanations of each setting).
 Please note that only 
\begin_inset Quotes eld
\end_inset

false
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 settings are implemented in CEGUI 0.7, the rest are new in CEGUI 1.0.
\end_layout

\begin_layout Standard
Native resolution is the resolution this imageset was created for in simplified
 terms.
 If the target resolution is different, the images may be scaled, depending
 on the 
\emph on
auto scaled
\emph default
 settings.
\end_layout

\begin_layout Subsection
Moving and resizing images
\end_layout

\begin_layout Standard
When selected, you can move the images by dragging (including multiple selection
) or using keyboard (WSAD scheme moves the images one pixel in each of the
 directions, pressing CTRL moves them 10 pixels in each of the directions).
 You can also resize the images by pressing SHIFT and one of the WSAD keys,
 this moves just the bottom right 'vertex' of the image rectangle.
 Image rectangles are 
\begin_inset Quotes eld
\end_inset

resizable rectangles
\begin_inset Quotes erd
\end_inset

, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Resizable-rectangle"

\end_inset

 for more details.
\end_layout

\begin_layout Subsection
Deleting images
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0in
width "50col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename imageset_editing/context_menu.png
	width 40page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
selected images context menu
\begin_inset CommandInset label
LatexCommand label
name "fig:selected-images-context"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can delete a selection of images by selecting, right clicking and choosing
 Delete in the context menu or pressing the 
\emph on
Delete key
\emph default
 (this is of course undoable).
 This will only delete the rectangle definitions of the images in the imageset,
 it will not alter the underlying texture in any way.
\end_layout

\begin_layout Subsection
The property box
\begin_inset CommandInset label
LatexCommand label
name "sub:The-property-box"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement o
overhang 0in
width "32col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename imageset_editing/image_property_box.png
	width 25page%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
image property box
\end_layout

\end_inset


\end_layout

\end_inset

To allow precise adjustments, user can alter all the values of selected
 image manually using the property box.
 Just select exactly 1 image and the property box will get filled with its
 values.
 Altering them will immediately preview the changes in the visual editing
 pane.
 All editing has undo/redo support.
 Editing image properties in the property box should always be preferred
 to editing raw XML in code mode, it is safer and has better and faster
 undo/redo.
\end_layout

\begin_layout Subsection
Editing image offsets
\end_layout

\begin_layout Standard
Offsets describe where the 0, 0 position is in the image.
 By default it is at the top left corner of the image.
 You may want to adjust it, especially if you are working with crosshairs,
 cursors or window edge imagery.
 Enable editing of offsets using the context menu (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:selected-images-context"

\end_inset

) and red offset crosshairs will appear, move them around to alter the offsets.
 You can alternatively use the property box to edit offsets manually using
 the keyboard, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:The-property-box"

\end_inset

.
\end_layout

\begin_layout Subsection
Selecting overlapping images
\end_layout

\begin_layout Standard
When images overlap in a way that would prevent you from selecting the image
 you need, you can select any image in the overlapping area and use the
 
\emph on
Cycle Overlapping Images
\emph default
 feature.
 It will cycle all overlapping images, just stop when the desired one is
 selected.
 The order in which the overlapping images are cycled is not well defined,
 just cycle until the right one is selected.
 You can see the option in the context menu in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:selected-images-context"

\end_inset

.
\end_layout

\begin_layout Subsection
The code mode
\end_layout

\begin_layout Standard
Raw editing of the XML is supported in imageset editing, click the 
\begin_inset Quotes eld
\end_inset

Code
\begin_inset Quotes erd
\end_inset

 tab in the bottom to switch to it.
 Please note that the raw format will always be the native CEGUI 1.0 format
 even if you selected CEGUI 0.7 as the target version the conversion will
 only happen when you save to a file.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Layout editing
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The word layout has 2 meanings in the CEGUI world so I will first disambiguate
 it.
 The first meaning is a hierarchy of widgets, the layout describes the way
 widgets are laid out as an 
\emph on
N-tree
\emph default
.
 The other meaning is a widget able to lay out its child widgets during
 runtime, this is more precisely called 
\emph on
Layout Container
\emph default
.
 I will use the word 
\begin_inset Quotes eld
\end_inset

layout
\begin_inset Quotes erd
\end_inset

 with the former meaning in the rest of this section unless stated otherwise.
\end_layout

\begin_layout Plain Layout
Each layout starts with a root widget and can only have exactly one root
 widget.
 If you need more root widgets, just put them into a 
\emph on
DefaultWindow
\emph default
 and use the 
\emph on
DefaultWindow
\emph default
 as the root widget).
 When CEGUI loads the layout it returns this root widget.
 Widgets always have a name, this name only needs to be unique in the parent
 in CEGUI 1.0, it has to be globally unique in CEGUI 0.7.
\end_layout

\begin_layout Plain Layout
When I say widget 
\begin_inset Quotes eld
\end_inset

Parent/Child/SubChild
\begin_inset Quotes erd
\end_inset

 I mean a widget that is a child of the 
\begin_inset Quotes eld
\end_inset

Child
\begin_inset Quotes erd
\end_inset

 widget and the 
\begin_inset Quotes eld
\end_inset

Child
\begin_inset Quotes erd
\end_inset

 widget is a child of the 
\begin_inset Quotes eld
\end_inset

Parent
\begin_inset Quotes erd
\end_inset

 widget.
 I will call this notation the 
\emph on
widget path
\emph default
.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
todo
\end_layout

\begin_layout Subsection
Custom widgets
\end_layout

\begin_layout Standard
The editor loads all schemes in the project so standard widgets get registered
 if you have them in your scheme.
 The scheme will be able to load a custom widget set module.
 The custom widget set module is able to add widget factories so you can
 even add custom made widgets and have the editor edit them.
\end_layout

\begin_layout Section
Animation list editing
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Animations are composed of Affectors and can work on any PropertySet based
 class (Widget, MouseCursor, â€¦).
 Each Affector affects exactly one property.
 Affector has keyframes where each keyframe has value and a progression
 (if the 
\begin_inset Quotes eld
\end_inset

time
\begin_inset Quotes erd
\end_inset

 should accelerate towards it, decelerate or be linear).
\end_layout

\end_inset


\end_layout

\begin_layout Section
Settings
\begin_inset CommandInset label
LatexCommand label
name "sec:Settings"

\end_inset


\end_layout

\begin_layout Standard
todo
\end_layout

\begin_layout Part
Troubleshooting
\end_layout

\begin_layout Standard
todo
\end_layout

\end_body
\end_document
